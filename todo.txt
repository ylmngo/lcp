Alter members to be an array of strings (Member Names or Emails) 
Add remote for lcp 
Create migrations for messages
Handle file uploads, JSON content in copy endpoint 
Handle parsing of different formats in content 
Middleware to handle, log errors
Add Rate Limiting 
Add Network Compression for large messages 
Encrypt messages that are being transferred over the wire 
Dockerize the application
Test Edge Cases as well (Add test to check whether a user is already member of a room while joining a new room)
Use AWS (How?)
Handle Logging Errors 
Create a CLI application to consume the REST API (lcp cpy <content>, lcp pst cmds)	 

endpoints: 
	POST create REQUIRES Authorization Header: Bearer token, Key? 
	SERVICE: Creates a new Redis Pub Sub With the a new UUID (UUID Of the Room). Add the Owner as a listener to the Pub Sub. Include the owner as a member. 
		 Add (UUID of Room, Key Hash, timestamp at which room was created, Owner ID, Owner Email, Members (Array of User Ids)) to Room Table of Postgres 
	RETURNS JSON (UUID of Room, Key Hash, timestamp at which room was created, Owner ID, Owner Email, Members)
	IDEAS: Add PERMISSIONS (Type of content allowed to be posted to room: Strings, Files, JSON Objects etc..) 

	POST join REQUIRES Authorization Header: Bearer Token, UUID of Room, Key? 
	SERVICE: Add User Id
	RETURNS JSON (UUID of Room, Owner ID, Owner Email) 
	IDEAS: RETURN The permissions of the room as well 

	POST copy REQUIRES Header: Bearer Token, UUID of Room, Message (bytes), Key? 
	SERVICE: Add Message to Redis Pub Sub (Message: JSON (UserId: int, Fwds: number[], Content: bytes, Format: default txt, Size: uint))  
	RETURNS: JSON (Message Sequence Id, UserId: int) 
	IDEAS:  Fwds (number[])  (default all), Middleware to verify Room identity and whether the user is a member of the room, Create Migration for messages 
	
	GET paste REQUIRES Header: Bearer Token, UUID of Room 
	SERVICE: Returns the message at the top of the current Redis stack 
	RETURNS: JSON Message 

ADMIN CREDS: 
	username: admin, password: admin_password, email: admin_email@gmail.com => room key: password, room id: 1a3d1181-fa9e-489b-a490-5ca9caa31094
	username: admin_username_2, password: admin_password_2, email: admin_email_2@gmail.com => room key: password, room id: fadbbf1d-94cb-4889-9ceb-9a551a5e1513